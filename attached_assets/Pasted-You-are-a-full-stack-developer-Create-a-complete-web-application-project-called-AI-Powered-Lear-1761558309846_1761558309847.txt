You are a full-stack developer.  
Create a complete web application project called “AI-Powered Learning Community” using the following tech stack:

Frontend:
- Vite + React (JavaScript)
- React Router DOM for page navigation
- Axios for API requests
- Organized file structure with components, pages, context, and services folders

Backend:
- Node.js + Express.js
- MongoDB with Mongoose for database
- Dotenv for environment variables
- JWT and bcryptjs for authentication
- CORS enabled for frontend-backend communication

Project Overview:
This web app will connect students and tutors.  
There are two user types: 
1. Student — can post learning requests or find tutors.  
2. Tutor — can view student requests and apply to teach.

The app should support:
- User registration and login (for both roles)
- CRUD operations for learning posts
- AI-powered recommendation logic placeholder (for future implementation)
- Secure authentication using JWT
- Basic UI pages for login, signup, dashboard, and profile management

🗂 Folder Structure:
learning-community/
│
├── client/                      # Frontend (Vite + React)
│   ├── src/
│   │   ├── assets/
│   │   ├── components/
│   │   ├── pages/
│   │   │   ├── Home.jsx
│   │   │   ├── Login.jsx
│   │   │   ├── Signup.jsx
│   │   │   ├── Dashboard.jsx
│   │   │   └── Profile.jsx
│   │   ├── context/AuthContext.jsx
│   │   ├── services/api.js
│   │   ├── App.jsx
│   │   ├── main.jsx
│   │   └── index.css
│   ├── package.json
│   └── vite.config.js
│
├── server/                      # Backend (Express + MongoDB)
│   ├── src/
│   │   ├── config/db.js
│   │   ├── models/
│   │   │   ├── userModel.js
│   │   │   ├── postModel.js
│   │   ├── routes/
│   │   │   ├── authRoutes.js
│   │   │   ├── postRoutes.js
│   │   ├── controllers/
│   │   │   ├── authController.js
│   │   │   ├── postController.js
│   │   ├── middleware/authMiddleware.js
│   │   └── index.js
│   ├── package.json
│   └── .env
│
├── .gitignore
└── README.md

Setup Requirements:
1. The server should run on port 5000.
2. The client should run on port 5173.
3. Add proxy in Vite config to connect frontend with backend (`/api` → `http://localhost:5000`).
4. Include a `.env` file in the server with:
   - MONGO_URI
   - JWT_SECRET
   - PORT=5000
5. Connect MongoDB using Mongoose and log a success message.

Authentication Flow:
- User registers with name, email, password, and role (student/tutor).
- Passwords should be hashed with bcrypt.
- Login returns a signed JWT.
- Protected routes should verify JWT using middleware.

Frontend:
- Create simple pages:
  - Home: basic intro and navigation links
  - Login / Signup: authentication forms
  - Dashboard: show list of posts or requests
  - Profile: display and edit user info
- Use AuthContext for managing logged-in state.
- Axios handles API calls with JWT header.

Backend APIs:
- POST /api/auth/register
- POST /api/auth/login
- GET /api/posts → get all posts
- POST /api/posts → create post (auth required)
- PUT /api/posts/:id → update post
- DELETE /api/posts/:id → delete post

Make sure the app runs completely on Replit — both client and server — and include instructions in README for how to start both.

Finally, seed the project with one example user and one example post for demo purposes.
